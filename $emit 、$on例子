父组件
<template>
  <div class="hello">
     <p>{{msg}}</p>
     <demo v-on:fromDemo='Fdemo'></demo>
  </div>
</template>
<script>
import Demo from './HelloWorld.vue'
export default {
  name: 'hello',
  data () {
    return {
       msg: '这里将显示点击者的名字'
    }
  },
  methods: {
    waitTime(c) {
      return new Promise(resolve=>{
        setTimeout(()=> {
            this.msg = c
            resolve(1)
        },1000)
      })
    },
    async Fdemo (param) {
      let b = param;
      let a = await this.waitTime(b);
    }
  },
  components : {
     Demo
  }
}
</script>


子组件
<template>
  <div>
      <p @click='emit'>{{msg}}</p>
  </div>
</template>

<script>
export default {
  name: 'demo',
  data () {
      return {
         msg : '点击后改变数据',
      }
  },
  methods : {
      emit () {
         this.$emit('fromDemo',['1',{a:'b'}])
      },
  }
}
</script>


参考文档
//这个方法，我们说她返回了一个promise
//但实际上，我们期待的是一个userInfo对象
//无奈该函数是异步的，无法立刻返回userInfo对象
//所以返回了一个Promise作为“承诺”
var getUserInfo = function() {
    return new Promise(function(resolve) {
        setTimeout(function() {
            var user = {name: 'Hanmeimei', age: 31};
            resolve(user);
        }, 3000);
    });
};

var user = getUserInfo();//获取返回值

//通过这个方法我们就能看出返回值是个Promise
console.log(Object.prototype.toString.apply(user));//[object Promise]

//那如何才能拿到真正的userInfo对象呢？
//下面代码就可以
user
    .then(function(userInfo) {
        
        //之所以这里拿到了userInfo，那是因为上面我们在3秒之后
        //resolve了真正的userInfo对象
        console.log(userInfo);//{ name: 'Hanmeimei', age: 31 }
    });
